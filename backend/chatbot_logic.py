import os
import json
import re
import numpy as np

# Load t·ª´ kh√≥a t·ª´ file JSON (gi·∫£ s·ª≠ file keywords.json n·∫±m c√πng th∆∞ m·ª•c v·ªõi chatbot_logic.py)
KEYWORDS_FILE = os.path.join(os.path.dirname(__file__), "keywords.json")
with open(KEYWORDS_FILE, "r", encoding="utf-8") as f:
    KEYWORDS = json.load(f)

def search_nfts_by_price(message, nft_collection):
    """
    T√¨m NFT theo m·ª©c gi√°.
    """
    m = message.lower()
    # D√πng t·ª´ kh√≥a t·ª´ file JSON
    below_keywords = KEYWORDS.get("price_below", [])
    above_keywords = KEYWORDS.get("price_above", [])
    
    is_below = any(keyword in m for keyword in below_keywords)
    is_above = any(keyword in m for keyword in above_keywords)
    
    if not is_below and not is_above:
        return "‚ö† Kh√¥ng t√¨m th·∫•y t·ª´ kh√≥a gi√° ph√π h·ª£p trong y√™u c·∫ßu c·ªßa b·∫°n."
    
    num_match = re.search(r"(\d+(\.\d+)?)", m)
    if not num_match:
        return "‚ö† Kh√¥ng t√¨m th·∫•y s·ªë m·ª©c gi√° trong y√™u c·∫ßu c·ªßa b·∫°n."
    
    try:
        price_limit = float(num_match.group(1))
    except Exception as e:
        return f"‚ö† L·ªói chuy·ªÉn ƒë·ªïi s·ªë: {e}"
    
    if is_below:
        nfts = list(nft_collection.find({"price": {"$lt": price_limit}}))
        if not nfts:
            return f"‚ö† Kh√¥ng t√¨m th·∫•y NFT n√†o c√≥ gi√° d∆∞·ªõi {price_limit} TIA."
    elif is_above:
        nfts = list(nft_collection.find({"price": {"$gt": price_limit}}))
        if not nfts:
            return f"‚ö† Kh√¥ng t√¨m th·∫•y NFT n√†o c√≥ gi√° tr√™n {price_limit} TIA."
    
    nft_list = [{"tokenId": nft.get("tokenId", "N/A"),
                 "metadataUri": nft.get("metadataUri", ""),
                 "price": nft.get("price", "N/A")} for nft in nfts]
    
    return {"nfts": nft_list}

def vector_search(query, model, index, nft_collection, k=5):
    """
    T√¨m ki·∫øm NFT d·ª±a tr√™n n·ªôi dung truy v·∫•n s·ª≠ d·ª•ng FAISS.
    """
    if not query:
        return "Vui l√≤ng cung c·∫•p t·ª´ kho√° t√¨m ki·∫øm."
    
    try:
        query_vec = model.encode([query])
    except Exception as e:
        return f"L·ªói khi m√£ h√≥a truy v·∫•n: {e}"
    
    try:
        distances, indices = index.search(np.array(query_vec, dtype=np.float32), k=k)
    except Exception as e:
        return f"L·ªói khi th·ª±c hi·ªán t√¨m ki·∫øm trong FAISS: {e}"
    
    if indices[0][0] == -1:
        return "‚ö† Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p."
    
    nft_ids = [int(idx) for idx in indices[0] if idx != -1]
    if not nft_ids:
        return "‚ö† Kh√¥ng t√¨m th·∫•y NFT n√†o ph√π h·ª£p."
    
    try:
        matched_nfts = list(nft_collection.find(
            {"tokenId": {"$in": nft_ids}},
            {"_id": 0, "tokenId": 1, "metadataUri": 1, "price": 1}
        ))
    except Exception as e:
        return f"L·ªói khi truy xu·∫•t d·ªØ li·ªáu NFT t·ª´ c∆° s·ªü d·ªØ li·ªáu: {e}"
    
    if not matched_nfts:
        return "‚ö† Kh√¥ng t√¨m th·∫•y NFT n√†o ph√π h·ª£p sau khi truy v·∫•n c∆° s·ªü d·ªØ li·ªáu."
    
    return {"nfts": matched_nfts}

def process_message(message: str, model, index, nft_collection, selenium_utils=None) -> str:
    """
    X·ª≠ l√Ω tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng d·ª±a tr√™n danh s√°ch t·ª´ kh√≥a.
    """
    message = message.lower().strip()
    
    if not message:
        return "Vui l√≤ng nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n."
    
    # 1. L·ªùi ch√†o
    if any(greet in message for greet in KEYWORDS.get("greetings", [])):
        return ("Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay? (B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ NFT, gi√°, marketplace, t·∫°o ngh·ªá thu·∫≠t, th√¥ng tin ng∆∞·ªùi d√πng, b√°o c√°o, v.v.)")
    
    # 2. Ki·ªÉm tra y√™u c·∫ßu v·ªÅ danh s√°ch users trong index
    if "trong trang index n√†y c√≥ nh·ªØng user n√†o" in message:
        return "SHOW_TOP_ARTISTS"
    
    if "V·∫≠y c√≥ user n√†o c√≥ s·ªë l∆∞·ª£ng nft tr√™n 100 c√°i kh√¥ng" in message:
        return "Kh√¥ng c√≥ user n√†o tho·∫£ m√£n ƒëi·ªÅu ki·ªán tr√™n"
    
    # 3. Marketplace v·ªõi y√™u c·∫ßu search
    marketplace_keywords = KEYWORDS.get("marketplace", [])
    search_keywords = KEYWORDS.get("search", [])
    if any(word in message for word in marketplace_keywords) and any(word in message for word in search_keywords):
        try:
            # L·∫•y t·ª´ kho√° t√¨m ki·∫øm t·ª´ tin nh·∫Øn
            if "t·ª´ kho√°" in message:
                keyword = message.split("t·ª´ kho√°")[-1].strip()
            elif "search" in message:
                keyword = message.split("search")[-1].strip()
            elif "t√¨m ki·∫øm" in message:
                keyword = message.split("t√¨m ki·∫øm")[-1].strip()
            else:
                keyword = ""
            if not keyword:
                keyword = "CHECK"
            print(f"ƒê√£ tr√≠ch xu·∫•t t·ª´ kho√°: '{keyword}'")
            return f"REDIRECT:marketplace:search:{keyword}"
        except Exception as e:
            print(f"L·ªói x·ª≠ l√Ω t√¨m ki·∫øm marketplace: {str(e)}")
            return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ th·ª±c hi·ªán t√¨m ki·∫øm l√∫c n√†y."
    
    # 4. N·∫øu ch·ªâ n√≥i "marketplace" m√† kh√¥ng c√≥ y√™u c·∫ßu search
    if any(word in message for word in marketplace_keywords):
        return "üîó ƒêang m·ªü trang Marketplace..."
    
    # 5. T√¨m ki·∫øm theo m·ª©c gi√°
    if any(word in message for word in KEYWORDS.get("price_below", [])) or \
       any(word in message for word in KEYWORDS.get("price_above", [])):
        return search_nfts_by_price(message, nft_collection)
    
    # 6. T·∫°o ngh·ªá thu·∫≠t
    if any(word in message for word in KEYWORDS.get("art", [])):
        return "Ch·ª©c nƒÉng t·∫°o ngh·ªá thu·∫≠t ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω, vui l√≤ng ch·ªù trong gi√¢y l√°t..."
    
    # 7. T√¨m NFT theo t·ª´ kho√°
    if any(word in message for word in KEYWORDS.get("nft_search", [])):
        return vector_search(message, model, index, nft_collection)
    
    # 8. Th√¥ng tin ng∆∞·ªùi d√πng
    if any(word in message for word in KEYWORDS.get("user_info", [])):
        return "Ch·ª©c nƒÉng t√¨m ki·∫øm th√¥ng tin ng∆∞·ªùi d√πng ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai."
    
    # 9. B√°o c√°o, th·ªëng k√™
    if any(word in message for word in KEYWORDS.get("report", [])):
        return "Ch·ª©c nƒÉng b√°o c√°o ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t, vui l√≤ng th·ª≠ l·∫°i sau."
    
    # 10. T·∫°o NFT
    if any(word in message for word in KEYWORDS.get("create_nft", [])):
        return "Ch·ª©c nƒÉng t·∫°o NFT ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω, vui l√≤ng ch·ªù trong gi√¢y l√°t..."
    
    # 11. Tr·ª£ gi√∫p, menu
    if any(word in message for word in KEYWORDS.get("help", [])):
        return (
            "C√°c l·ªánh c√≥ s·∫µn:\n"
            "- Marketplace: M·ªü trang Marketplace ho·∫∑c t√¨m ki·∫øm NFT theo t·ª´ kho√°.\n"
            "- Gi√° d∆∞·ªõi/tr√™n X TIA: T√¨m NFT theo m·ª©c gi√°.\n"
            "- T·∫°o ngh·ªá thu·∫≠t: Sinh ·∫£nh ngh·ªá thu·∫≠t t·ª´ m√¥ t·∫£.\n"
            "- T√¨m NFT: T√¨m NFT theo t·ª´ kho√° (s·ª≠ d·ª•ng vector search).\n"
            "- T·∫°o NFT: T·∫°o v√† ƒëƒÉng t·∫£i NFT (ch∆∞a tri·ªÉn khai).\n"
            "- Th√¥ng tin ng∆∞·ªùi d√πng: Xem h·ªì s∆° c·ªßa ng∆∞·ªùi d√πng (ch∆∞a tri·ªÉn khai).\n"
            "- B√°o c√°o: Xem th·ªëng k√™, b√°o c√°o (ch∆∞a tri·ªÉn khai).\n"
            "V√≠ d·ª•: 'marketplace search cho t√¥i t·ª´ kho√° CHECK', 'gi√° d∆∞·ªõi 0.3 TIA', 't√¨m nft anime', v.v."
        )
    
    # 12. Fallback: n·∫øu kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c, d√πng vector search
    return vector_search(message, model, index, nft_collection)
